x <- 1:6
y <- 10
x
y
x+y
ls()
rm(y)
ls()
getwd
getwd()
h <- 'hello'
fun <- function() {
ANSWER <- readline("Is your wife gorgeous? ")
if (substr(ANSWER, 1, 1) == "n")
cat("This is impossible.  YOU LIED!\n")
else
cat("I knew it.\n")
}
if(interactive()) fun()
fun()
ls()
rm(h,x)
save (fun,file="Gilli.rda")
rm(fun)
load ("Gilli.rda")
fun()
quit
load ("Gilli.rda")
fun()
fun()
ls()7
ls()
rm(fun)
prinf()
print()
install.packages("fortunes")
install.packages("fortunes")
install.packages("fortunes")
install.packages("fortunes")
library("fortunes")
fortune("This is R")
print(fortune)
fortune()
fortunes()
detach("package:fortunes", unload=TRUE)
library("fortunes", lib.loc="~/R/win-library/3.2")
detach("package:fortunes", unload=TRUE)
library("fortunes", lib.loc="~/R/win-library/3.2")
detach("package:fortunes", unload=TRUE)
library("fortunes", lib.loc="~/R/win-library/3.2")
baskets.of.granny <- c(12,4,4,6,9,3)
baskets.of.granny
sum(baskets.of.granny)
baskets.of.geraldine <- c(5,3,2,2,12,9)
intro <- ("It is amazing ! The All Star Grannies scored")
rm(intro)
intro <- ("It is amazing ! The All Star Grannies scored a total of")
outro <- ("baskets in the last 6 games!")
total.baskets <- baskets.of.granny + baskets.of.geraldine
text <- paste(intro,sum(total.baskets),outro)
cat (text)
text()
text
granny.money <- baskets.of.granny *120
geraldine.money <- baskets.of.geraldine * 145
granny.money
granny.money()
log(1:3)
log(1:3, base =4)
log(1:3, base =6)
str(baskets.of.granny)
is.numeric(baskets.of.granny)
is.integer(baskets.of.granny)
numbers <- 30:1
numbers
number[5]
numbers [5]
numbers[c[5,11,3]]
numbers[c(5,11,3)]
baskets.of.granny[4] <- 5
baskets.of.granny[4] <- 4
baskets.of.granny[3] <- 5
baskets.of.granny[4] <- 11
baskets.of.granny >5
whic(baskets.of.granny >5)
which(baskets.of.granny >5)
the.best <- baskets.of.geraldine < baskets.of.granny
which(the.best)
find.package("devtools")
installed.packages("devtools")
find.package("devtools")
find.package(devtools)
find.package("devtools")
find_rtools()
install.packages("devtools")
library(devtools)
exit
library(devtools)
find_rtools()
exit
quit
exit
install.packages("swirl")
package_version("swirl")
packageVersion("swirl")
library (swirl)
install_from_swirl("R Programming")
install_from_swirl("R Programming")
eee
exit
swirl()
exit
quit
quit
swir()
library("swirl")
swirl()
quit
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
rm(x,y,z)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
rm(cube)
rm(x,y)
rm(f)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
g(x)
g(3)
g <- function(y) {
y + z
}
g()
g(3)
z<-4
g(3)
x<-3
x + g(x)
g(x)
library(datasets)
data(iris)
?iris
str(iris)
head(iris)
virginica<-subset(iris,Species == 'virginica')
sl<-data.frame(iris$Sepal.Length[iris$Species=="virginica"])
sl
summary(sl)
apply(iris[, 1:4], 2, mean)
swd C:\Users\lyndon\datasciencecoursera\Coursera-R-Programming\Week 4\Data
pwd
wd
swd!
setwd("C:\Users\lyndon\datasciencecoursera\Coursera-R-Programming\Week 4\Data")
list.files()
# helper function for getting the hospital name
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best("NY", "pneumonia")
pwd
wd
best <- function(state, outcome) {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if(outcome == "heart attack") {
hosp_name <- helper(data, 11, state)
} else if(outcome == "heart failure") {
hosp_name <- helper(data, 17, state)
} else {
hosp_name <- helper(data, 23, state)
}
result <- hosp_name
return(result)
}
}
best("NY", "pneumonia")
dir()
rm(helper)
setwd("C:\Users\lyndon\datasciencecoursera\Coursera-R-Programming\Week 4\Data")
setwd("C:/Users/lyndon/datasciencecoursera/Coursera-R-Programming/Week 4/Data")
dir()
best("NY", "pneumonia")
setwd("C:/Users/lyndon/datasciencecoursera/Coursera-R-Programming/Week 4")
best("NY", "pneumonia")
# helper function for getting the hospital name
helper <- function(data, col_num, state) {
state_subset <- data[data[, 7]==state, ]
outcome_arr <- state_subset[, col_num]
min <- min(outcome_arr, na.rm=T)
min_index <- which(outcome_arr == min)
hosp_name <- state_subset[min_index, 2]
return(hosp_name)
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
## 30-day death rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if (num == "best") {
rank <- beast(state, outcome)
} else {
if(outcome == "heart attack") {
rank <- num_helper(data, 11, state, num)
} else if(outcome == "heart failure") {
rank <- num_helper(data, 17, state, num)
} else {
rank <- num_helper(data, 23, state, num)
}
}
result <- rank
return(result)
}
}
num_helper <- function(data, col_num, state, num) {
state_subset <- data[data[, 7]==state, ]
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- state_subset[, col_num]
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rank_helper <- function(state_subset, outcome_arr, num) {
result <- state_subset[, 2][order(outcome_arr, state_subset[, 2])[num]]
return(result)
}
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## Return hospital name in that state with the given rank
## 30-day death rate
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
# change data type from character to numeric
data[, 11] <- as.numeric(data[, 11]) # heart attack
data[, 17] <- as.numeric(data[, 17]) # heart failure
data[, 23] <- as.numeric(data[, 23]) # pneumonia
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% data$State) {
stop("invalid state")
} else if(!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
if (num == "best") {
rank <- beast(state, outcome)
} else {
if(outcome == "heart attack") {
rank <- num_helper(data, 11, state, num)
} else if(outcome == "heart failure") {
rank <- num_helper(data, 17, state, num)
} else {
rank <- num_helper(data, 23, state, num)
}
}
result <- rank
return(result)
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
num_helper <- function(state_subset, col_num, num) {
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- as.numeric(state_subset[, col_num])
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "best") {
rank <- rank_helper(state_subset, outcome_arr, 1)
} else if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rank_helper <- function(state_subset, outcome_arr, num) {
result <- state_subset[, 2][order(outcome_arr, state_subset[, 2])[num]]
return(result)
}
rankall <- function(outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
# read the data file
directory <- "./data/outcome-of-care-measures.csv"
data <- read.csv(directory, colClasses="character")
valid_outcomes <- c("heart attack", "heart failure", "pneumonia")
state_arr <- sort(unique(data$State))
arr_len <- length(state_arr)
hospital <- rep("", arr_len)
if (!outcome %in% valid_outcomes) {
stop("invalid outcome")
} else {
for(i in 1:arr_len) {
# loop for each state
state_subset <- data[data[, 7]==state_arr[i], ]
if(outcome == "heart attack") {
hospital[i] <- num_helper(state_subset, 11, num)
} else if (outcome == "heart failure") {
hospital[i] <- num_helper(state_subset, 17, num)
} else {
hospital[i] <- num_helper(state_subset, 23, num)
}
}
}
# create the data frame to return
df <- data.frame(hospital=hospital, state=state_arr)
result <- df
return(result)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
